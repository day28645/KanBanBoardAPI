// <auto-generated />
using System;
using KanBanAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KanBanAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250524133743_createDB")]
    partial class createDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KanBanAPI.Models.Board", b =>
                {
                    b.Property<int>("Board_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Board_Id"));

                    b.Property<string>("Id_Card")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId_Card")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("boardName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("createDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Board_Id");

                    b.HasIndex("Id_Card");

                    b.HasIndex("UserId_Card");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("KanBanAPI.Models.EditBoard", b =>
                {
                    b.Property<int>("editId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("editId"));

                    b.Property<int>("Board_Id")
                        .HasColumnType("int");

                    b.Property<string>("Id_Card")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("editDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("editId");

                    b.HasIndex("Board_Id");

                    b.HasIndex("Id_Card");

                    b.ToTable("EditBoards");
                });

            modelBuilder.Entity("KanBanAPI.Models.EditTask", b =>
                {
                    b.Property<int>("editTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("editTaskId"));

                    b.Property<string>("Id_Card")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Task_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("editDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("editTaskId");

                    b.HasIndex("Id_Card");

                    b.HasIndex("Task_Id");

                    b.ToTable("EditTasks");
                });

            modelBuilder.Entity("KanBanAPI.Models.KanbanTask", b =>
                {
                    b.Property<int>("Task_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Task_Id"));

                    b.Property<string>("Id_Card")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId_Card")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("taskName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Task_Id");

                    b.HasIndex("Id_Card");

                    b.HasIndex("UserId_Card");

                    b.ToTable("KanbanTasks");
                });

            modelBuilder.Entity("KanBanAPI.Models.Login", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginId"));

                    b.Property<string>("Id_Card")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("loginDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("LoginId");

                    b.HasIndex("Id_Card");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("KanBanAPI.Models.User", b =>
                {
                    b.Property<string>("Id_Card")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("passwords")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id_Card");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KanBanAPI.Models.Board", b =>
                {
                    b.HasOne("KanBanAPI.Models.User", "Users")
                        .WithMany("createBoards")
                        .HasForeignKey("Id_Card")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KanBanAPI.Models.User", null)
                        .WithMany("Boards")
                        .HasForeignKey("UserId_Card");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KanBanAPI.Models.EditBoard", b =>
                {
                    b.HasOne("KanBanAPI.Models.Board", "Boards")
                        .WithMany("EditBoards")
                        .HasForeignKey("Board_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KanBanAPI.Models.User", "Users")
                        .WithMany("EditBoards")
                        .HasForeignKey("Id_Card")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Boards");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KanBanAPI.Models.EditTask", b =>
                {
                    b.HasOne("KanBanAPI.Models.User", "Users")
                        .WithMany("EditTasks")
                        .HasForeignKey("Id_Card")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KanBanAPI.Models.KanbanTask", "KanbanTasks")
                        .WithMany("EditTasks")
                        .HasForeignKey("Task_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("KanbanTasks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KanBanAPI.Models.KanbanTask", b =>
                {
                    b.HasOne("KanBanAPI.Models.User", "Users")
                        .WithMany("createTasks")
                        .HasForeignKey("Id_Card")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KanBanAPI.Models.User", null)
                        .WithMany("KanbanTasks")
                        .HasForeignKey("UserId_Card");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KanBanAPI.Models.Login", b =>
                {
                    b.HasOne("KanBanAPI.Models.User", "Users")
                        .WithMany("Logins")
                        .HasForeignKey("Id_Card")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KanBanAPI.Models.Board", b =>
                {
                    b.Navigation("EditBoards");
                });

            modelBuilder.Entity("KanBanAPI.Models.KanbanTask", b =>
                {
                    b.Navigation("EditTasks");
                });

            modelBuilder.Entity("KanBanAPI.Models.User", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("EditBoards");

                    b.Navigation("EditTasks");

                    b.Navigation("KanbanTasks");

                    b.Navigation("Logins");

                    b.Navigation("createBoards");

                    b.Navigation("createTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
